--- arch/arm/mach-exynos/cpufreq-4210.c
+++ arch/arm/mach-exynos/cpufreq-4210.c
@@ -23,7 +23,7 @@
 
 #include <plat/clock.h>
 
-#define CPUFREQ_LEVEL_END	L13
+#define CPUFREQ_LEVEL_END	L8
 
 static int max_support_idx;
 static int min_support_idx = (CPUFREQ_LEVEL_END - 1);
@@ -37,22 +37,17 @@
 	unsigned int	clkdiv;
 };
 
-extern int exynos4210_volt_table[CPUFREQ_LEVEL_END];
+static unsigned int exynos4210_volt_table[CPUFREQ_LEVEL_END];
 
 static struct cpufreq_frequency_table exynos4210_freq_table[] = {
-	{L0, 1400*1000},
-	{L1, 1300*1000},
+	{L0, 1600*1000},
+	{L1, 1400*1000},
 	{L2, 1200*1000},
-	{L3, 1100*1000},
-	{L4, 1000*1000},
-	{L5, 900*1000},
-	{L6, 800*1000},
-	{L7, 700*1000},
-	{L8, 600*1000},
-	{L9, 500*1000},
-	{L10, 400*1000},
-	{L11, 300*1000},
-	{L12, 200*1000},
+	{L3, 1000*1000},
+	{L4, 800*1000},
+	{L5, 500*1000},
+	{L6, 200*1000},
+	{L7, 100*1000},
 	{0, CPUFREQ_TABLE_END},
 };
 
@@ -65,11 +60,6 @@
 	{L5, 0},
 	{L6, 0},
 	{L7, 0},
-	{L8, 0},
-	{L9, 0},
-	{L10, 0},
-	{L11, 0},
-	{L12, 0},
 };
 
 static unsigned int clkdiv_cpu0[CPUFREQ_LEVEL_END][7] = {
@@ -78,129 +68,84 @@
 	 * { DIVCORE, DIVCOREM0, DIVCOREM1, DIVPERIPH,
 	 *		DIVATB, DIVPCLK_DBG, DIVAPLL }
 	 */
-	/* ARM L2: 1400MHz */
+	/* ARM L0: 1600MHz */
 	{ 0, 3, 7, 3, 4, 1, 7 },
 
-	/* ARM L3: 1300MHz */
+	/* ARM L1: 1400MHz */
 	{ 0, 3, 7, 3, 4, 1, 7 },
 
-	/* ARM L4: 1200MHz */
+	/* ARM L2: 1200MHz */
 	{ 0, 3, 7, 3, 4, 1, 7 },
 
-	/* ARM L5: 1100MHz */
+	/* ARM L3: 1000MHz */
 	{ 0, 3, 7, 3, 4, 1, 7 },
 
-	/* ARM L6: 1000MHz */
-	{ 0, 3, 7, 3, 4, 1, 7 },
-
-	/* ARM L7: 900MHz */
-	{ 0, 3, 7, 3, 4, 1, 7 },
-
-	/* ARM L8: 800MHz */
-	{ 0, 3, 7, 3, 3, 1, 7 },
-
-	/* ARM L9: 700MHz */
-	{ 0, 3, 7, 3, 3, 1, 7 },
-
-	/* ARM L10: 600MHz */
-	{ 0, 3, 7, 3, 3, 1, 7 },
-
-	/* ARM L11: 500MHz */
+	/* ARM L4: 800MHz */
 	{ 0, 3, 7, 3, 3, 1, 7 },
 
-	/* ARM L12: 400MHz */
+	/* ARM L5: 500MHz */
 	{ 0, 3, 7, 3, 3, 1, 7 },
 
-	/* ARM L13: 300MHz */
-	{ 0, 3, 7, 3, 3, 1, 7 },
+	/* ARM L6: 200MHz */
+	{ 0, 1, 3, 1, 3, 1, 0 },
 
-	/* ARM L14: 200MHz */
-	{ 0, 1, 3, 1, 3, 1, 7 },
+	/* ARM L7: 100MHz */
+	{ 0, 1, 3, 1, 3, 1, 0 },
 };
 
 static unsigned int clkdiv_cpu1[CPUFREQ_LEVEL_END][2] = {
 	/* Clock divider value for following
 	 * { DIVCOPY, DIVHPM }
 	 */
-	/* ARM L2: 1400MHz */
+	/* ARM L0: 1600MHz */
 	{ 5, 0 },
 
-	/* ARM L3: 1300MHz */
+	/* ARM L1: 1400MHz */
 	{ 5, 0 },
 
-	/* ARM L4: 1200MHz */
+	/* ARM L2: 1200MHz */
 	{ 5, 0 },
 
-	/* ARM L5: 1100MHz */
-	{ 5, 0 },
-
-	/* ARM L6: 1000MHz */
-	{ 4, 0 },
-
-	/* ARM L7: 900MHz */
+	/* ARM L3: 1000MHz */
 	{ 4, 0 },
 
-	/* ARM L8: 800MHz */
-	{ 3, 0 },
-
-	/* ARM L9: 700MHz */
-	{ 3, 0 },
-
-	/* ARM L10: 600MHz */
-	{ 3, 0 },
-
-	/* ARM L11: 500MHz */
+	/* ARM L4: 800MHz */
 	{ 3, 0 },
 
-	/* ARM L12: 400MHz */
+	/* ARM L5: 500MHz */
 	{ 3, 0 },
 
-	/* ARM L13: 300MHz */
+	/* ARM L6: 200MHz */
 	{ 3, 0 },
 
-	/* ARM L14: 200MHz */
+	/* ARM L7: 100MHz */
 	{ 3, 0 },
 };
 
 static unsigned int exynos4_apll_pms_table[CPUFREQ_LEVEL_END] = {
-	/* APLL FOUT L2: 1400MHz */
-	((350<<16)|(6<<8)|(0x1)),
+	/* APLL FOUT L0: 1600MHz */
+	((200<<16)|(3<<8)|(0x1)),
 
-	/* APLL FOUT L3: 1300MHz */
-	((325<<16)|(6<<8)|(0x1)),
+	/* APLL FOUT L1: 1400MHz */
+	((350<<16)|(3<<8)|(0x1)),
 
-	/* APLL FOUT L4: 1200MHz */
+	/* APLL FOUT L2: 1200MHz */
 	((150<<16)|(3<<8)|(0x1)),
 
-	/* APLL FOUT L5: 1100MHz */
-	((275<<16)|(6<<8)|(0x1)),
-
-	/* APLL FOUT L6: 1000MHz */
+	/* APLL FOUT L3: 1000MHz */
 	((250<<16)|(6<<8)|(0x1)),
 
-	/* APLL FOUT L7: 900MHz */
-	((225<<16)|(6<<8)|(0x1)),
-
-	/* APLL FOUT L8: 800MHz */
+	/* APLL FOUT L4: 800MHz */
 	((200<<16)|(6<<8)|(0x1)),
 
-	/* APLL FOUT L9: 700MHz */
-	((350<<16)|(6<<8)|(0x2)),
-
-	/* APLL FOUT L10: 600MHz */
-	((300<<16)|(6<<8)|(0x2)),
-
-	/* APLL FOUT L11: 500MHz */
+	/* APLL FOUT L5: 500MHz */
 	((250<<16)|(6<<8)|(0x2)),
 
-	/* APLL FOUT L12: 400MHz */
-	((200<<16)|(6<<8)|(0x2)),
-
-	/* APLL FOUT L13: 300MHz */
-	((300<<16)|(6<<8)|(0x3)),
-
-	/* APLL FOUT L14: 200MHz */
+	/* APLL FOUT L6: 200MHz */
 	((200<<16)|(6<<8)|(0x3)),
+
+	/* APLL FOUT L7: 100MHz */
+	((200<<16)|(6<<8)|(0x4)),
 };
 
 /*
@@ -208,20 +153,23 @@
  */
 
 static const unsigned int asv_voltage_A[CPUFREQ_LEVEL_END][8] = {
-
-	{ 1400000, 1375000, 1350000, 1325000, 1300000, 1275000, 1250000, 1225000 },	//1400MHz
-	{ 1350000, 1325000, 1300000, 1275000, 1250000, 1225000, 1200000, 1175000 },	//1300MHz
-	{ 1300000, 1275000, 1250000, 1225000, 1200000, 1175000, 1150000, 1125000 },	//1200MHz
-	{ 1275000, 1250000, 1225000, 1200000, 1175000, 1150000, 1125000, 1100000 },	//1100MHz
-	{ 1250000, 1225000, 1200000, 1175000, 1150000, 1125000, 1100000, 1075000 },	//1000MHz
-	{ 1225000, 1200000, 1175000, 1150000, 1125000, 1100000, 1075000, 1050000 },	// 900MHz
-	{ 1200000, 1175000, 1150000, 1125000, 1100000, 1075000, 1050000, 1025000 },	// 800MHz
-	{ 1175000, 1150000, 1125000, 1100000, 1075000, 1050000, 1025000, 1000000 },	// 600MHz
-	{ 1150000, 1125000, 1100000, 1075000, 1050000, 1025000, 1000000,  975000 },	// 600MHz
-	{ 1125000, 1100000, 1075000, 1050000, 1025000, 1000000,  975000,  950000 },	// 500MHz
-	{ 1100000, 1075000, 1050000, 1025000, 1000000,  975000,  950000,  925000 },	// 400MHz
-	{ 1075000, 1050000, 1025000, 1000000,  975000,  950000,  925000,  900000 },	// 300MHz
-	{ 1050000, 1025000, 1000000,  975000,  950000,  925000,  900000,  875000 },	// 200MHz
+	/*
+	 *	   SS, A1, A2, B1, B2, C1, C2, D
+	 * @Dummy:
+	 * @1200 :
+	 * @1000 :
+	 * @800	 :	ASV_VOLTAGE_TABLE
+	 * @500  :
+	 * @200  :
+	 */
+	{ 1450000, 1450000, 1450000, 1450000, 1450000, 1450000, 1450000, 1450000 },
+	{ 1400000, 1400000, 1400000, 1350000, 1350000, 1350000, 1350000, 1350000 },
+	{ 1350000, 1350000, 1300000, 1275000, 1250000, 1225000, 1200000, 1175000 },
+	{ 1300000, 1250000, 1200000, 1175000, 1150000, 1125000, 1100000, 1075000 },
+	{ 1200000, 1150000, 1100000, 1075000, 1050000, 1025000, 1000000,  975000 },
+	{ 1100000, 1050000, 1000000,  975000,  975000,  950000,  925000,  925000 },
+	{ 1050000, 1000000,  975000,  950000,  950000,  925000,  925000,  925000 },
+	{ 1050000, 1000000,  975000,  950000,  950000,  925000,  925000,  925000 },
 
 };
 
@@ -235,12 +183,14 @@
 	 * @500	 :
 	 * @200	 :
 	 */
+	{ 1450000, 1450000, 1450000, 1450000, 1450000 },
 	{ 1350000, 1350000, 1300000, 1250000, 1225000 },
 	{ 1325000, 1275000, 1225000, 1175000, 1150000 },
 	{ 1225000, 1175000, 1125000, 1075000, 1050000 },
-	{ 1150000, 1100000, 1050000, 1000000,  975000 },
-	{ 1050000, 1000000,  950000,  950000,  950000 },
-	{ 1025000,  975000,  950000,  950000,  950000 },
+	{ 1150000, 1100000, 1050000, 1000000,  975000 },
+	{ 1050000, 1000000,  950000,  950000,  950000 },
+	{ 1025000,  975000,  950000,  950000,  950000 },
+	{ 1025000,  975000,  950000,  950000,  950000 },
 
 };
 
@@ -364,51 +314,64 @@
 	}
 }
 
-static void __init set_volt_table(unsigned int asv_group)
+static void __init set_volt_table(void)
 {
+	unsigned int asv_group = 0;
+	bool for_1400 = false, for_1200 = false, for_1000 = false;
+	unsigned int tmp;
 	unsigned int i;
 
-	printk(KERN_INFO "DVFS : VDD_ARM Voltage table set with %d Group\n", asv_group);
-
-	for (i = 0 ; i < CPUFREQ_LEVEL_END ; i++) {
-			exynos4210_volt_table[i] =
-				asv_voltage_A[i][asv_group];
+	tmp = exynos_result_of_asv;
+
+	asv_group = (tmp & 0xF);
+
+	switch (tmp  & (SUPPORT_FREQ_MASK << SUPPORT_FREQ_SHIFT)) {
+	case SUPPORT_1400MHZ:
+		for_1400 = true;
+		max_support_idx = L0;
+		break;
+	case SUPPORT_1200MHZ:
+		for_1200 = true;
+		max_support_idx = L0; //gm L2;
+		break;
+	case SUPPORT_1000MHZ:
+		for_1000 = true;
+		max_support_idx = L3;
+		break;
+	default:
+		for_1000 = true;
+		max_support_idx = L3;
+		break;
 	}
-}
 
-static unsigned int asv_group;
+	/*
+	 * If ASV group is S, can not support 1.4GHz
+	 * Disabling table entry
+	 */
+	if ((asv_group == 0) || !for_1400)
+	{
+//		exynos4210_freq_table[L0].frequency = CPUFREQ_ENTRY_INVALID;
+//		exynos4210_freq_table[L1].frequency = CPUFREQ_ENTRY_INVALID;
+	} //gm
 
-void update_volt_table(unsigned int asv_group)
-{
-	unsigned int i;
+	if (for_1000)
+		exynos4210_freq_table[L2].frequency = CPUFREQ_ENTRY_INVALID;
 
-	printk(KERN_INFO "DVFS : VDD_ARM Voltage table updated with %d Group\n", asv_group);
+	printk(KERN_INFO "DVFS : VDD_ARM Voltage table set with %d Group\n", asv_group);
 
-	for (i = 0 ; i < CPUFREQ_LEVEL_END ; i++) {
-			exynos4210_volt_table[i] =
-				asv_voltage_A[i][asv_group];
+	if (for_1400) {
+		for (i = 0 ; i < CPUFREQ_LEVEL_END ; i++) {
+				exynos4210_volt_table[i] =
+					asv_voltage_B[i][asv_group];
+		}
+	} else {
+		for (i = 0 ; i < CPUFREQ_LEVEL_END ; i++) {
+				exynos4210_volt_table[i] =
+					asv_voltage_A[i][asv_group];
+		}
 	}
 }
 
-ssize_t show_asv_group(struct cpufreq_policy *policy, char *buf)
-{
-	return sprintf(buf, "%d\n", asv_group);
-}
-
-ssize_t store_asv_group(struct cpufreq_policy *policy,
-				const char *buf, size_t count)
-{
-	unsigned int ret;
-	ret = sscanf(buf, "%d", &asv_group);
-
-	if (ret != 1 || asv_group < 0 || asv_group > 7)
-		return -EINVAL;
-	else
-		update_volt_table(asv_group);
-
-	return count;
-}
-
 #if defined(CONFIG_REGULATOR_MAX8997)
 extern void max8997_set_arm_voltage_table(int *voltage_table, int arr_size);
 
@@ -436,8 +399,7 @@
 	unsigned int tmp;
 	unsigned long rate;
 
-	asv_group = exynos_result_of_asv & 0xF;
-	set_volt_table(asv_group);
+	set_volt_table();
 	exynos4210_cpufreq_set_pmic_vol_table();
 
 	cpu_clk = clk_get(NULL, "armclk");
@@ -481,13 +443,8 @@
 	}
 
 	info->mpll_freq_khz = rate;
-	/*
-	 * Sleep of death fix for overclock freq tables.
-	 * Should always be the 800Mhz step as imposed
-	 * by the Samsung exynos hardware.
-	*/
-	info->pm_lock_idx = L6;
-	info->pll_safe_idx = L4;
+	info->pm_lock_idx = L4;
+	info->pll_safe_idx = L3;
 	info->max_support_idx = max_support_idx;
 	info->min_support_idx = min_support_idx;
 	info->cpu_clk = cpu_clk;
